{
	"New Service Unit Test": {
		"prefix": "test-service",
		"body": [
      "// TODO: Remember to add the test group for runner: https://gitlab.olist.io/mobile/mobile-app/-/wikis/%5BCI%5D-Jest-Runner-Groups",
      "",
      "describe('${1:ServiceName}', () => {",
      "  describe('when the service is called with GET method', () => {",
      "    it('returns the ...', async () => {",
      "",
      "    });",
      "",
      "    it('returns an instance of AppError when the request fails', async () => {",
      "",
      "    });",
      "  });",
      "});",
		],
		"description": "Creates a new service unit test"
	},
	"New Component Unit Test": {
		"prefix": "test-component",
		"body": [
      "import React from 'react';",
      "",
      "import { render, fireEvent } from '@testing-library/react-native';",
      "",
      "// TODO: Remember to add the test group for runner: https://gitlab.olist.io/mobile/mobile-app/-/wikis/%5BCI%5D-Jest-Runner-Groups",
      "",
      "function render${1:ComponentName}(props: ${1:ComponentName}Props) {",
      "  return render(<${1:ComponentName} {...props} />);",
      "}",
      "",
      "describe('${1:ComponentName}', () => {",
      "  describe('when the component is rendered', () => {",
      "    it('contains a ...', () => {",
      "      const { getByText } = render${1:ComponentName}(mockName);",
      "      const Title = getByText(mockName.title);",
      "",
      "      expect(Title).toBeTruthy();",
      "    });",
      "  });",
      "",
      "  describe('when the inferior button is pressed', () => {",
      "    it('calls the onPress function', () => {",
      "      const { getByText } = render${1:ComponentName}(mockName);",
      "      const Title = getByText(mockName.title);",
      "",
      "      fireEvent.press(Title);",
      "",
      "      expect(mockName.onPress).toHaveBeenCalled();",
      "    });",
      "  });",
      "});",
		],
		"description": "Creates a component unit test"
	}
}
